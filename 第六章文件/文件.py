# 什么是文件
# 内存中存放的数据在计算机关机后就会消失。
# 要长久保存数据，就要使用硬盘、光盘、U 盘等设备。
# 为了便于数据的管理和检索，引入了“文件”的概念。
# 一篇文章、一段视频、一个可执行程序，都可以被保存为一个文件，
# 并赋予一个文件名。操作系统以文件为单位管理磁盘中的数据。
# 一般来说，文件可分为文本文件、视频文件、音频文件、图像文件、可执行文件等多种类别。

# 文件操作包含哪些内容呢？
# 文件操作主要包括
# 打开、关闭、读、写、备份等操作
# 文件操作的作用就是把一些内容(数据)存储存放起来，
# 可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力。

# 基本操作
# 想想我们平常对文件的基本操作，大概可以分为三个步骤（简称文件操作三步走）：
# ① 打开文件
# ② 读写文件
# ③ 关闭文件
# 注意：可以只打开和关闭文件，不进行任何读写
# open()打开函数
# 在Python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下
# open(name, mode)
# name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。
# mode：设置打开文件的模式(访问模式)：只读、写入、追加等。
# 注意：此时的`f`是`open`函数的文件对象，对象是Python中一种特殊的数据类型，拥有属性和方法，
# 可以使用对象.属性或对象.方法对其进行访问，后续面向对象课程会给大家进行详细的介绍。
f = open('../python.txt', 'r')
# 访问模式
# r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
# rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
# r+	打开一个文件用于读写。文件指针将会放在文件的开头。
# rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
# w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，
# 即原有内容会被删除。如果该文件不存在，创建新文件。
# wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，
# 并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，
# 即原有内容会被删除。如果该文件不存在，创建新文件。
# wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，
# 并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。
# 也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# ab	以二进制格式打开一个文件用于追加。如果该文件已存在，
# 文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。
# 如果该文件不存在，创建新文件进行写入。
# a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。
# 文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
# ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，
# 文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

# 写操作
# 三个步骤  1,以可写方式打开文件 2. 写入内容 3,关闭
# 1. 打开文件
f = open('../python.txt', 'w')
# 注意：
# w模式和a模式：如果文件不存在则创建该文件；如果文件存在，w模式先清空再写入，a模式直接末尾追加。
# r模式：如果文件不存在则报错。
# 2.文件写入
f.write('hello world')

# 3. 关闭文件
f.close()
f1=open('python.txt','w')
f1.write('hello zrk\n hello zrk\n  hello zrk\n')
f1.close()

# 读操作的相关方法
# read()方法：
# 文件对象.read(num)
# num表示要从文件中读取的数据的长度（单位是字字符），如果没有传入num，
# 那么就表示读取文件中所有的数据。

# readlines()方法：
# readlines可以按照行的方式
# 把整个文件中的内容进行一次性读取，
# 并且返回的是一个列表，其中每一行的数据为一个元素。
f = open('python.txt')
# readline()方法：一次读取一行内容，
# 每运行一次readline()函数，其就会将文件的指针向下移动一行
content = f.readlines()

# ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']
print(content)

# 关闭文件
f.close()

# 文件备份
# 需求：用户输入当前目录下任意文件名，
# 完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。
# 实现思路：
# ① 接收用户输入的文件名
# ② 规划备份文件名
# ③ 备份文件写入数据

# ① 接收用户输入目标文件名
# 1.0 获取要备份的文件名称
# old_name = input('请输入您要备份的文件名：')
# ② 规划备份文件名
# 提取目标文件后缀
# 组织备份的文件名，xx[备份]后缀
# 2.1 提取文件后缀点的下标
# index = old_name.rfind('.')

# print(index)  # 后缀中.的下标

# print(old_name[:index])  # 源文件名（无后缀）

# 2.1 组织新文件名 旧文件名 + [备份] + 后缀
# new_name = old_name[:index] + '[备份]' + old_name[index:]

# 打印新文件名（带后缀）
# print(new_name)
# 代码实现
# 3.1 打开文件
# old_f = open(old_name, 'rb')
# new_f = open(new_name, 'wb')

# 3.2 将源文件数据写入备份文件
# while True:
#     con = old_f.read(1024)
#     if len(con) == 0:
#         break
#     new_f.write(con)

# 3.3 关闭文件
# old_f.close()
# new_f.close()

# 文件和文件夹的操作
# os模块
# 在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：
# ① 导入os模块
import os
# ② 还用os模块的相关功能
#
# os.函数()
#  文件操作
# 1	os.rename(目标文件名称，新文件名称)	对文件进行重命名操作
# 2	os.remove(要删除文件名称)	对文件进行删除操作
# 1、导入os模块、time模块
import os
import time

# 2、调用rename方法实现重命名（需要手工刷新左侧导航栏）
os.rename('python.txt', 'readme.txt')

# 3、调用time模块中的sleep方法休眠100s
time.sleep(100)

# 4、删除readme.txt文件
os.remove('readme.txt')

# 文件夹操作
# 1	os.mkdir(新文件夹名称)	创建一个指定名称的文件夹
# 2	os.getcwd()	current  work  directory，获取当前目录名称
# 3	os.chdir(切换后目录名称)	change directory，切换目录
# 4	os.listdir(目标目录)	获取指定目录下的文件信息，返回列表
# 5	os.rmdir(目标目录)	用于删除一个指定名称的"空"文件夹
# 案例：准备一个static文件夹以及file1.txt、file2.txt、file3.txt三个文件
# ① 在程序中，将当前目录切换到static文件夹
# ② 创建一个新images文件夹以及test文件夹
# ③ 获取目录下的所有文件
# ④ 移除test文件夹
# # 1、导入os模块
# import os
#
#
# # 2、将当前工作目录切换到static文件夹
# os.chdir('static')
# # print(os.getcwd())
#
# # 3、创建images以及test文件夹
# os.mkdir('images')
# os.mkdir('test')
#
# # 4、获取目录下的所有文件
# for i in os.listdir():
#     print(i)
#
# # 5、移除test文件夹
# os.rmdir('test')