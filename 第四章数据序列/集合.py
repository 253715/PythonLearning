# 集合（set）是一个无序的不重复元素序列。
# 重复一遍：集合里边的元素是不可重复的并且集合内的元素还是无序的。
# 也就是说，集合可以像元组一样，设置不可改变的类型。也可以默认像字典，
# 列表一样，可以迭代改变。同时集合里的元素可以是列表，元组，字典。

# 创建集合使用`{}`或`set()`，
# 但是如果要创建空集合只能使用`set()`，因为`{}`用来创建空字典。
s1 = {10, 20, 30, 40, 50}
print(s1)
s2 = {10, 30, 20, 10, 30, 40, 30, 50}
print(s2)
s3 = set('abcdefg')
print(s3)
s4 = set()
print(type(s4))  # set
# 但是如果要创建空集合只能使用`set()`，因为`{}`用来创建空字典。
s5 = {}
print(type(s5))  # dict
# 基本操作
# ☆ 增加
# ① add()方法 ：增加单一元素
s1 = {10, 20}
s1.add(100)
s1.add(10)
print(s1)   # 结果：{100, 10, 20}
print('============================')
# 因为集合有去重功能，所以，
# 当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。
# ② update()方法 ：增加序列数据
s1 = {10, 20}
# 结果：s1.update(100)  # 报错
s1.update([100, 200])
s1.update('abc')
print(s1)
print('============================')
# 注：字符串也是一个数据序列
# ☆ 删除
# ① remove()方法：删除集合中的指定数据，如果数据不存在则报错。
# ② discard()方法：删除集合中的指定数据，如果数据不存在也不会报错。
s1 = {10, 20}
s1.remove(10)
print(s1)
# 这里数据不存在就会报错
# s1.remove(10)  # 报错
s1.discard(10)  # 不报错
print(s1)
print('============================')
# ③ pop()方法：随机删除集合中的某个数据，并返回这个数据。
s1 = {10, 20, 30, 40, 50}

del_num = s1.pop()
print(del_num)
print(s1)

# ☆ 查询
# ① in：判断数据在集合序列
# ② not in：判断数据不在集合序列
s1 = {10, 20, 30, 40, 50}

print(10 in s1)
print(10 not in s1)

# 数据序列的公共方法
# +	合并	字符串、列表、元组
# *	复制	字符串、列表、元组
# in	元素是否存在	字符串、列表、元组、字典
# not in	元素是否不存在	字符串、列表、元组、字典

# 1. 字符串
str1 = 'aa'
str2 = 'bb'
str3 = str1 + str2
print(str3)  # aabb
# 2. 列表
list1 = [1, 2]
list2 = [10, 20]
list3 = list1 + list2
print(list3)  # [1, 2, 10, 20]
# 3. 元组
t1 = (1, 2)
t2 = (10, 20)
t3 = t1 + t2
print(t3)  # (10, 20, 100, 200)


# 1. 字符串
print('-' * 10)

# 2. 列表
list1 = ['hello']
# ['hello', 'hello', 'hello', 'hello']
print(list1 * 4)

# 3. 元组
t1 = ('world',)
# ('world', 'world', 'world', 'world')
print(t1 * 4)
print('===========================================')
# 1	len()	计算容器中元素个数
# 2	del 或 del()	删除
# 3	max()	返回容器中元素最大值
# 4	min()	返回容器中元素最小值
# 5	range(start, end, step)
# 生成从start到end的数字，步长为 step，供for循环使用
# 6	enumerate()	函数用于将一个
# 可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，
# 同时列出数据和数据下标，一般用在 for 循环当中。
# enumerate(可遍历对象, start=0)
# 注意：start参数用来设置遍历数据的下标的起始值，默认为0。
list1 = ['a', 'b', 'c', 'd', 'e']
for i in enumerate(list1):
    print(i)
for key, value in enumerate(list1, start=1):
    print(f'下标是{key}, 对应的字符是{value}')

# 列表集合字典推导式
# 1、什么是推导式
# 推导式comprehensions（又称解析式），
# 是Python的一种独有特性。
# 推导式是可以从一个数据序列构建
# 另一个新的数据序列（一个有规律的列表或控制一个有规律列表）的结构体。
# 共有三种推导：`列表推导式`、`集合推导式`、`字典推导式。

# 案例：创建一个0-9的列表
# 1.while
# 1. 准备一个空列表
list1 = []
# 2. 书写循环，依次追加数字到空列表list1中
i = 0
while i < 10:
    list1.append(i)
    i += 1
print(list1)
print('=======================')
# 2.for
list1 = []
for i in range(10):
    list1.append(i)
print(list1)
print('=======================')
# 3.列表推导式
# 变量名 = [表达式 for 变量 in 列表 for 变量 in 列表]
# 变量名 = [表达式 for 变量 in 列表 if 条件]
# 它的含义是创建一个包含从 0 到 9 的整数的列表。
# 这是通过一个循环 for i in range(10)
# 来实现的，它遍历从 0 到 9 的数字。
# 在每次迭代中，将当前的数字 i 添加到列表中。
# 第一个i其实表示将i添加到列表中 [i]  第二个i表示变量i
list1 = [i for i in range(10)]
print(list1)

# 创建一个0-9的偶数列表
# 带if的列表推导式
# 1. 第一种方式 使用步长实现
list1 = [i for i in range(0, 10, 2)]
print(list1)
# 2.第二种方式 if实现
list1 = [i for i in range(10) if i % 2 == 0]
print(list1)

# 5、多个for循环实现列表推导式
# 案例：创建列表 => [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
# 将（i，j) 添加到列表中   i在 i in range(1, 3)
list1 = [(i, j) for i in range(1, 3) for j in range(3)]
print(list1)
print('===============================================')
# 字典推导式
# 思考：有如下两个列表，如何快速合并为一个字典？
# list1 = ['name', 'age', 'gender']
# list2 = ['Tom', 20, 'man']

# 答：使用字典推导式
# 基本语法：
# 字典推导式列表推导式思想的延续，语法差不多，只不过产生的是字典而已。
# 字典推导式格式：
# 变量名 = {....}
# 字典推导式作用：快速合并列表为字典或提取字典中目标数据。

# 案例1：创建一个字典：字典key是1-5数字，value是这个数字的2次方。
# {i: i**2} 这个其实就是字典的形式
dict1 = {i: i**2 for i in range(1, 5)}
print(dict1)  # {1: 1, 2: 4, 3: 9, 4: 16}
print('===============================================')
# 案例2：将两个列表合并为一个字典
list1 = ['name', 'age', 'gender']
list2 = ['Tom', 20, 'man']
# 通过下标可以去除列表中的值list1[i]: list2[i]
dict1 = {list1[i]: list2[i] for i in range(len(list1))}
print(dict1)
print('===============================================')
# 案例3：提取字典中目标数据
counts = {'MBP': 268, 'HP': 125, 'DELL': 201, 'Lenovo': 199, 'acer': 99}

# 需求：提取上述电脑数量大于等于200的字典数据
# key: value  counts.items()是用来遍历字典的
count1 = {key: value for key, value in counts.items() if value >= 200}
print(count1)  # {'MBP': 268, 'DELL': 201}
print('===============================================')

# 集合推导式
# 集合推导式跟列表推导式非常相似，唯一区别在于用 { } 代替 [ ]
# 需求：创建一个集合，数据为下方列表的2次方。
# 注意：集合有数据去重功能。
list1 = [1, 1, 2]
set1 = {i ** 2 for i in list1}
# 注意：集合有数据去重功能。
print(set1)  # {1, 4}
